{"version":3,"sources":["images/pokemon.png","images/ball-poke.png","services/PokemonData.js","components/Header.js","components/renderPokemonType.js","components/PokemonCard.js","components/PokemonList.js","components/Filter.js","components/Home.js","components/renderPokemonAbilities.js","components/renderPokemonMoves.js","components/Details.js","components/PokemonDetail.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","GetData","fetch","then","response","json","Header","className","src","Logo","alt","renderPokemonTypes","pokemon","map","type","index","key","PokemonCard","props","to","pokemonId","pokemonImage","pokemonName","pokemonType","PokemonList","loading","Pokeball","pokemons","length","pokemonsList","name","image","types","id","Filter","searchByName","onChange","placeholder","Home","renderPokemonAbilities","ability","renderPokemonMoves","move","Details","pokemonAbility","pokemonHeight","pokemonWeight","pokemonMoves","PokemonDetail","undefined","height","weight","abilities","moves","Footer","App","state","inputValue","bind","renderOriginal","renderDetail","this","getPokemonData","PokemonData","data","results","item","url","pokemonInfo","push","sprites","front_default","setState","ev","currentTarget","value","filterName","filter","toUpperCase","includes","selectedPokemon","selectedId","parseInt","match","params","exact","path","component","render","React","Component","Boolean","window","location","hostname","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6573ed30.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.ddd5084d.png\";","module.exports = __webpack_public_path__ + \"static/media/ball-poke.3f26bc9c.png\";","const url = \"https://pokeapi.co/api/v2/pokemon/?limit=25\";\n\nconst GetData = () => {\n  return fetch(url).then(response => response.json());\n};\n\nexport default GetData;\n","import React from \"react\";\nimport Logo from \"../images/pokemon.png\";\nimport \"../stylesheets/Header.scss\";\n\nconst Header = () => {\n  return (\n    <div className=\"header__box\">\n      <img src={Logo} alt=\"Pokemon\" className=\"logo\" />\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\n\nconst renderPokemonTypes = pokemon => {\n  return pokemon.map((type, index) => (\n    <li\n      className=\"pokemon__types--item pokemon__types--detail--item\"\n      key={index}\n    >\n      {type}\n    </li>\n  ));\n};\n\nexport default renderPokemonTypes;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport renderPokemonTypes from \"./renderPokemonType\";\nimport \"../stylesheets/PokemonCard.scss\";\n\nconst PokemonCard = props => {\n  return (\n    <li className=\"pokemon__card\">\n      <Link className=\"pokemon__card-link\" to={`/detail/${props.pokemonId}`}>\n        <img\n          className=\"pokemon__image\"\n          src={props.pokemonImage}\n          alt={`${props.pokemonName}`}\n        />\n        <p className=\"pokemon__id\">{`ID / ${props.pokemonId}`}</p>\n\n        <div className=\"pokemon__info\">\n          <h2 className=\"pokemon__name\">{props.pokemonName}</h2>\n\n          <ul className=\"pokemon__types\">\n            {renderPokemonTypes(props.pokemonType)}\n          </ul>\n        </div>\n      </Link>\n    </li>\n  );\n};\n\nexport default PokemonCard;\n","import React from \"react\";\nimport PokemonCard from \"./PokemonCard\";\nimport Pokeball from \"../images/ball-poke.png\";\nimport \"../stylesheets/PokemonList.scss\";\n\nconst PokemonList = props => {\n  const { loading } = props;\n\n  if (loading) {\n    return (\n      <div className=\"loader\">\n        <img className=\"pokeball\" src={Pokeball} alt=\"Pokeball\" />\n      </div>\n    );\n  } else if (props.pokemons.length === 0) {\n    return (\n      <div className=\"not__found\">\n        <p className=\"not__found--text\">\n          No hay pokemons que coincidan con la b√∫squeda\n        </p>\n      </div>\n    );\n  } else {\n    let pokemonsList = props.pokemons.map((pokemon, index) => {\n      return (\n        <PokemonCard\n          key={index}\n          pokemonName={pokemon.name}\n          pokemonImage={pokemon.image}\n          pokemonType={pokemon.types}\n          pokemonId={pokemon.id}\n        />\n      );\n    });\n\n    return (\n      <div className=\"pokemon__wrapper\">\n        <ul className=\"pokemon\">{pokemonsList}</ul>\n      </div>\n    );\n  }\n};\n\nexport default PokemonList;\n","import React from \"react\";\nimport \"../stylesheets/Filter.scss\";\n\nconst Filter = props => {\n  const { searchByName } = props;\n  return (\n    <form className=\"filter__container\">\n      <input\n        onChange={searchByName}\n        className=\"input\"\n        placeholder=\"Search pokemon by name\"\n      ></input>\n    </form>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport PokemonList from \"./PokemonList\";\nimport Filter from \"./Filter\";\n\nconst Home = props => {\n  return (\n    <div className=\"App\">\n      <Filter searchByName={props.searchByName} />\n      <PokemonList pokemons={props.pokemons} loading={props.loading} />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst renderPokemonAbilities = pokemon => {\n  return pokemon.map((ability, index) => (\n    <li className=\"pokemon__abilities--detail--item\" key={index}>\n      {ability}\n    </li>\n  ));\n};\n\nexport default renderPokemonAbilities;\n","import React from \"react\";\n\nconst renderPokemonMoves = pokemon => {\n  return pokemon.map((move, index) => (\n    <li className=\"pokemon__moves--detail--item\" key={index}>\n      {move}\n    </li>\n  ));\n};\n\nexport default renderPokemonMoves;\n","import React from \"react\";\nimport renderPokemonTypes from \"./renderPokemonType\";\nimport renderPokemonAbilities from \"./renderPokemonAbilities\";\nimport renderPokemonMoves from \"./renderPokemonMoves\";\nimport \"../stylesheets/Details.scss\";\n\nconst Details = props => {\n  return (\n    <div className=\"pokemon__card--detail\">\n      <h2 className=\"pokemon__name--detail\">{props.pokemonName}</h2>\n      <div className=\"pokemon__wrap--detail\">\n        <img\n          className=\"pokemon__image--detail\"\n          src={props.pokemonImage}\n          alt={`${props.pokemonName}`}\n        />\n        <ul className=\"pokemon__types--detail\">\n          {renderPokemonTypes(props.pokemonType)}\n        </ul>\n      </div>\n\n      <div className=\"pokemon__info--wrapper\">\n        <div>\n          <div className=\"pokemon__profile--detail\">Profile</div>\n          <p className=\"pokemon__abilities--detail\">\n            <strong>Abilities:</strong>\n            {renderPokemonAbilities(props.pokemonAbility)}\n          </p>\n          <ul>\n            <li className=\"pokemon__height--detail\">\n              <strong>Height:</strong> {props.pokemonHeight}\n            </li>\n            <li className=\"pokemon__weight--detail\">\n              <strong>Weight:</strong> {props.pokemonWeight}\n            </li>\n          </ul>\n        </div>\n        <div>\n          <div className=\"pokemon__movestitle--detail\">Moves</div>\n          <p className=\"pokemon__moves--detail\">\n            {renderPokemonMoves(props.pokemonMoves)}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Details;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport Details from \"./Details\";\nimport \"../stylesheets/PokemonDetail.scss\";\n\nconst PokemonDetail = props => {\n  if (props.pokemon === undefined) {\n    return <div>Loading...</div>;\n  } else {\n    return (\n      <div className=\"details\">\n        <Details\n          pokemonName={props.pokemon.name}\n          pokemonImage={props.pokemon.image}\n          pokemonType={props.pokemon.types}\n          pokemonHeight={props.pokemon.height}\n          pokemonWeight={props.pokemon.weight}\n          pokemonAbility={props.pokemon.abilities}\n          pokemonMoves={props.pokemon.moves}\n          pokemonId={props.pokemon.id}\n        />\n        <Link className=\"back-link\" to=\"/\">\n          <div className=\"back\">Back</div>\n        </Link>\n      </div>\n    );\n  }\n};\n\nexport default PokemonDetail;\n","import React from \"react\";\nimport \"../stylesheets/Footer.scss\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <p className=\"footer__text\">Luz Aguirre Morales &copy; 2019</p>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport { Route, Switch } from \"react-router-dom\";\nimport PokemonData from \"../services/PokemonData\";\nimport Header from \"./Header\";\nimport Home from \"./Home\";\nimport PokemonDetail from \"./PokemonDetail\";\nimport Footer from \"./Footer\";\nimport \"../stylesheets/App.scss\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemons: [],\n      inputValue: \"\",\n      loading: true\n    };\n    this.searchByName = this.searchByName.bind(this);\n    this.renderOriginal = this.renderOriginal.bind(this);\n    this.renderDetail = this.renderDetail.bind(this);\n  }\n\n  componentDidMount() {\n    this.getPokemonData();\n  }\n\n  getPokemonData() {\n    PokemonData().then(data => {\n      for (let item of data.results) {\n        fetch(item.url)\n          .then(response => response.json())\n          .then(pokemonInfo => {\n            const types = [];\n            for (let item of pokemonInfo.types) {\n              types.push(item.type.name);\n            }\n            const abilities = [];\n            for (let item of pokemonInfo.abilities) {\n              abilities.push(item.ability.name);\n            }\n            const moves = [];\n            for (let item of pokemonInfo.moves) {\n              moves.push(item.move.name);\n            }\n            const pokemon = {\n              name: pokemonInfo.name,\n              image: pokemonInfo.sprites.front_default,\n              id: pokemonInfo.id,\n              types: types,\n              abilities: abilities,\n              moves: moves,\n              height: pokemonInfo.height,\n              weight: pokemonInfo.weight\n            };\n            this.setState({\n              pokemons: [...this.state.pokemons, pokemon],\n              loading: false\n            });\n          });\n      }\n    });\n  }\n\n  searchByName(ev) {\n    const inputValue = ev.currentTarget.value;\n    return this.setState({\n      inputValue: inputValue\n    });\n  }\n\n  renderOriginal() {\n    let filterName = this.state.pokemons.filter(pokemon => {\n      return pokemon.name\n        .toUpperCase()\n        .includes(this.state.inputValue.toUpperCase());\n    });\n\n    return (\n      <Home\n        pokemons={filterName}\n        loading={this.state.loading}\n        searchByName={this.searchByName}\n      />\n    );\n  }\n\n  renderDetail(props) {\n    const selectedId = parseInt(props.match.params.id);\n    let selectedPokemon;\n    for (const pokemon of this.state.pokemons) {\n      if (pokemon.id === selectedId) {\n        selectedPokemon = pokemon;\n      }\n    }\n    return <PokemonDetail pokemon={selectedPokemon} />;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Switch>\n          <Route exact path=\"/\" component={this.renderOriginal} />\n          <Route path=\"/detail/:id\" render={this.renderDetail} />\n        </Switch>\n\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { HashRouter } from \"react-router-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}
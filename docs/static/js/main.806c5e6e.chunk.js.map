{"version":3,"sources":["images/pokemon.png","images/ball-poke.png","services/PokemonData.js","components/Header.js","components/Filter.js","components/PokemonCard.js","components/PokemonList.js","components/Footer.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","GetData","fetch","then","response","json","Header","className","src","Logo","alt","Filter","props","searchByName","onChange","placeholder","PokemonCard","pokemonImage","pokemonName","pokemonId","pokemonType","map","type","index","key","PokemonList","loading","Pokeball","pokemons","length","pokemonsList","pokemon","name","image","types","id","Footer","App","state","inputValue","bind","this","getPokemonData","PokemonData","data","results","item","url","pokemonInfo","push","sprites","front_default","setState","ev","currentTarget","value","filterName","filter","toUpperCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.806c5e6e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pokemon.ddd5084d.png\";","module.exports = __webpack_public_path__ + \"static/media/ball-poke.3f26bc9c.png\";","const url = \"https://pokeapi.co/api/v2/pokemon/?limit=25\";\n\nconst GetData = () => {\n  return fetch(url).then(response => response.json());\n};\n\nexport default GetData;\n","import React from \"react\";\nimport Logo from \"../images/pokemon.png\";\nimport \"../stylesheets/Header.scss\";\n\nconst Header = () => {\n  return (\n    <div className=\"header__box\">\n      <img src={Logo} alt=\"Pokemon\" className=\"logo\" />\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"../stylesheets/Filter.scss\";\n\nconst Filter = props => {\n  const { searchByName } = props;\n  return (\n    <form className=\"filter__container\">\n      <input\n        onChange={searchByName}\n        className=\"input\"\n        placeholder=\"Search pokemon by name\"\n      ></input>\n    </form>\n  );\n};\n\nexport default Filter;\n","import React from \"react\";\nimport \"../stylesheets/PokemonCard.scss\";\n\nconst renderPokemonTypes = pokemon => {\n  return pokemon.map((type, index) => (\n    <li className=\"pokemon__types--item\" key={index}>\n      {type}\n    </li>\n  ));\n};\n\nconst PokemonCard = props => {\n  return (\n    <li className=\"pokemon__card\">\n      <img\n        className=\"pokemon__image\"\n        src={props.pokemonImage}\n        alt={`${props.pokemonName}`}\n      />\n      <p className=\"pokemon__id\">{`ID / ${props.pokemonId}`}</p>\n\n      <div className=\"pokemon__info\">\n        <h2 className=\"pokemon__name\">{props.pokemonName}</h2>\n\n        <ul className=\"pokemon__types\">\n          {renderPokemonTypes(props.pokemonType)}\n        </ul>\n      </div>\n    </li>\n  );\n};\n\nexport default PokemonCard;\n","import React from \"react\";\nimport PokemonCard from \"./PokemonCard\";\nimport Pokeball from \"../images/ball-poke.png\";\nimport \"../stylesheets/PokemonList.scss\";\n\nconst PokemonList = props => {\n  const { loading } = props;\n\n  if (loading) {\n    return (\n      <div className=\"loader\">\n        <img className=\"pokeball\" src={Pokeball} alt=\"Pokeball\" />\n      </div>\n    );\n  } else if (props.pokemons.length === 0) {\n    return (\n      <div className=\"not__found\">\n        <p className=\"not__found--text\">\n          No hay pokemons que coincidan con la b√∫squeda\n        </p>\n      </div>\n    );\n  } else {\n    let pokemonsList = props.pokemons.map((pokemon, index) => {\n      return (\n        <PokemonCard\n          key={index}\n          pokemonName={pokemon.name}\n          pokemonImage={pokemon.image}\n          pokemonType={pokemon.types}\n          pokemonId={pokemon.id}\n        />\n      );\n    });\n\n    return <ul className=\"pokemon\">{pokemonsList}</ul>;\n  }\n};\n\nexport default PokemonList;\n","import React from \"react\";\nimport \"../stylesheets/Footer.scss\";\n\nconst Footer = () => {\n  return (\n    <div className=\"footer\">\n      <p className=\"footer__text\">Luz Aguirre Morales &copy; 2019</p>\n    </div>\n  );\n};\n\nexport default Footer;\n","import React from \"react\";\nimport PokemonData from \"../services/PokemonData\";\nimport Header from \"./Header\";\nimport Filter from \"./Filter\";\nimport PokemonList from \"./PokemonList\";\nimport Footer from \"./Footer\";\nimport \"../stylesheets/App.scss\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      pokemons: [],\n      inputValue: \"\",\n      loading: true\n    };\n    this.searchByName = this.searchByName.bind(this);\n  }\n\n  componentDidMount() {\n    this.getPokemonData();\n  }\n\n  getPokemonData() {\n    PokemonData().then(data => {\n      for (let item of data.results) {\n        fetch(item.url)\n          .then(response => response.json())\n          .then(pokemonInfo => {\n            const types = [];\n            for (let item of pokemonInfo.types) {\n              types.push(item.type.name);\n            }\n            const pokemon = {\n              name: pokemonInfo.name,\n              image: pokemonInfo.sprites.front_default,\n              id: pokemonInfo.id,\n              types: types\n            };\n            this.setState({\n              pokemons: [...this.state.pokemons, pokemon],\n              loading: false\n            });\n          });\n      }\n    });\n  }\n\n  searchByName(ev) {\n    const inputValue = ev.currentTarget.value;\n    return this.setState({\n      inputValue: inputValue\n    });\n  }\n\n  render() {\n    let filterName = this.state.pokemons.filter(pokemon => {\n      return pokemon.name\n        .toUpperCase()\n        .includes(this.state.inputValue.toUpperCase());\n    });\n\n    return (\n      <div className=\"App\">\n        <Header />\n        <Filter searchByName={this.searchByName} />\n        <PokemonList\n          className=\"pokemon__page\"\n          pokemons={filterName}\n          loading={this.state.loading}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}